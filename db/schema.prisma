// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int       @id @default(autoincrement())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  name           String?
  email          String    @unique
  hashedPassword String?
  role           String    @default("USER")
  tokens         Token[]
  sessions       Session[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
  user               User?     @relation(fields: [userId], references: [id])
  userId             Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String
  user        User     @relation(fields: [userId], references: [id])
  userId      Int

  @@unique([hashedToken, type])
}

model Course {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  summary   String
  lessons   Lesson[]
}

model Lesson {
  id         Int             @id @default(autoincrement())
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  image      String
  order      Int
  course     Course          @relation(fields: [courseId], references: [id])
  courseId   Int
  quizPage   LessonPageQuiz? @relation(fields: [quizPageId], references: [id])
  textPage   LessonPageText? @relation(fields: [textPageId], references: [id])
  quizPageId Int?            @unique
  textPageId Int?            @unique
}

model LessonPageQuiz {
  id        Int                     @id @default(autoincrement())
  createdAt DateTime                @default(now())
  updatedAt DateTime                @updatedAt
  question  String
  options   LessonPageQuizOptions[]
  lesson    Lesson?
}

model LessonPageQuizOptions {
  id        Int            @id @default(autoincrement())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  option    String
  correct   Boolean        @default(false)
  quiz      LessonPageQuiz @relation(fields: [quizId], references: [id])
  quizId    Int
}

model LessonPageText {
  id        Int                   @id @default(autoincrement())
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
  lines     LessonPageTextLines[]
  lesson    Lesson?
}

model LessonPageTextLines {
  id        Int            @id @default(autoincrement())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  content   String
  text      LessonPageText @relation(fields: [textId], references: [id])
  textId    Int
}
